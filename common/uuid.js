/*
    author     : bak chulhyong
    created    : 2018 - 09 - 16
    modified   : 2018 - 09 - 16
    description: uuid file
*/
const m_os     = require('os'); // createUserKey 관련
const m_crypto = require('crypto');

function _getInterfaceIP()
{
	var npos;
	var nets = m_os.networkInterfaces();
	for(var ifname in nets ) {
	    if( ifname == 'lo' )
	        continue;
	    var netinfo = nets[ifname];
	    for( npos=0; npos< netinfo.length; npos++ ) {
	        var ipinfo = netinfo[npos];
			if( ipinfo.internal == true )
				continue;
	        if( ipinfo.family == 'IPv4') {
				return ipinfo.address;
	        }
	    }
	}
	return null;
}

function _decToHex(val, padding)
{
    var hex = Number(val).toString(16);
    padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;

    if( padding < 0 ) {
        padding *= -1;
        while (hex.length < padding) {
            hex += "0";
        }
    } else {
        while (hex.length < padding) {
            hex = "0" + hex;
        }
    }
    return hex;
}

var g_unique_idx = 0;
module.exports.generate32 = function()
{
	// Micro 처리 단위 까지 보장 해당 함수가 Nano단위로 처리 되면 중복 가능성 있음
	var now_date = new Date();

	var value = '';
	var val_date = 0;

    //////////////////////////////////////////////
	// 8 : int(10) Date(6) + Time(4)
	val_date = 0;       val_date += (now_date.getFullYear() % 100);		// 2 (2017 -> 17)
    val_date *= 100;    val_date += (now_date.getMonth() + 1) % 100;	// 2 , 4
	val_date *= 100;    val_date += (now_date.getDate() % 100);			// 2 , 6
    val_date *= 100; 	val_date += (now_date.getHours() % 100);		// 2 , 8
    val_date *= 100;  	val_date += (now_date.getMinutes() % 100);		// 2 , 10
	value += _decToHex(val_date, -8);

    g_unique_idx++;
    if( g_unique_idx >= 1000000 )
		g_unique_idx = 1;

    //////////////////////////////////////////////
    // 8 : int(10) : Second(2) + etc(8)
    val_date = 0;          val_date += Math.round(Math.random() * 1000) % 40;	// 2 , 10
	val_date *= 1000000;   val_date += (g_unique_idx % 1000000);				// 6 , 8
    val_date *= 100;       val_date += (now_date.getSeconds() % 100);			// 2
	value += _decToHex(val_date, -8);

    //////////////////////////////////////////////
	// 8 : IP or Host (8)
	var var_name = '';
	var val_ip = _getInterfaceIP(true);
	if( val_ip != null ) {
		var npos;
		var ip_nums = val_ip.split('.');
		for( npos=0; npos< ip_nums.length; npos++ ) {
	        var_name += _decToHex(ip_nums[npos], 2);
		}
	}

	if( var_name == null || var_name.length <= 0 ) {
		var val_host = m_os.hostname();
		val_host = val_host.toUpperCase();

		var spos = val_host.length - 4;

		var_name = '';

		calc = (val_host.charCodeAt(spos+0) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);

		calc = (val_host.charCodeAt(spos+1) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);

		calc = (val_host.charCodeAt(spos+2) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);

		calc = (val_host.charCodeAt(spos+3) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);
	}
	value += var_name;
    //////////////////////////////////////////////
	// 4 : PID (4)
	var var_pid = _decToHex(process.pid, 4);
	if( var_pid.length > 6 )
		var_pid = var_pid.substr(0, 4);
	value += var_pid;

	//////////////////////////////////////////////
	// 2 : Reserved
	value += "00";

	//////////////////////////////////////////////
	// Logic (2) : Scramble,  0 ~ 99로 100 가지
	// 30 바이트로 섞음... 32 바이트중 마지막 2바이트는 로직 코드 임
	var cpx_logic = [
		[  5, 26, 15, 16, 10, 21, 22,  7, 13,  8,  0, 24, 23,  4, 18, 17,  1, 29, 28,  9,  3, 20, 12, 14,  6, 25, 11, 27, 19,  2, ],
		[ 26,  7, 23, 12, 22,  2,  3, 17,  5, 29,  0, 24, 27, 18,  8,  1, 13, 10, 11, 19, 25,  6, 28, 16, 14,  4,  9, 15, 21, 20, ],
		[ 15, 10,  4, 21,  8,  2, 19,  5, 16,  6, 20, 28, 26, 29, 14,  1, 18, 23, 11, 22, 24,  3,  9, 17,  7, 25, 13,  0, 12, 27, ],
		[ 19, 23,  8,  0,  6,  3, 25,  7,  1, 29,  4, 15, 13, 11, 26,  2, 10, 22, 14,  9, 18, 12, 27, 16, 20, 21, 17, 28,  5, 24, ],
		[ 12,  6, 21,  1,  8,  5, 20, 13, 25,  2,  0,  9, 23, 28, 16, 18, 10, 27,  4,  7, 26, 11, 15, 14, 17,  3, 19, 22, 29, 24, ],
		[  1, 13, 15,  3,  2, 18, 22, 19, 27,  8, 28, 29,  7,  4,  9, 17, 21, 10, 24, 12, 11,  6, 20,  5,  0, 14, 16, 23, 26, 25, ],
		[ 12, 11, 17, 14, 13, 15,  4, 20, 22,  9,  7, 18, 26,  0,  3, 21, 29, 16, 28, 19,  6,  8,  2, 10, 23, 25,  5, 27, 24,  1, ],
		[ 21, 29, 17, 25,  3, 11,  4, 13, 18, 24, 22,  9,  1, 15, 26, 12, 10, 20,  2, 27, 14, 16,  6,  5,  0, 23, 28,  7,  8, 19, ],
		[  1, 16, 20, 17, 27, 25, 15, 26,  5, 10, 28,  7,  4,  2, 21,  9, 24, 29, 22, 13,  3, 12, 14, 19,  8,  0, 23, 18, 11,  6, ],
		[ 10, 21, 24,  7, 20,  8, 19, 26,  2, 12, 28, 14, 25,  6, 18, 16, 23,  9,  3, 11, 27,  0,  1, 29, 15, 13,  4, 22, 17,  5, ],
		[ 26, 15, 25,  1, 29,  3, 11,  8, 19, 20, 23,  6,  9, 24,  5, 16,  4, 18,  2, 14, 17, 13, 21, 22,  7, 12, 27, 10, 28,  0, ],
		[ 23,  8, 22,  0,  3, 14,  4, 16,  1, 27, 29, 26, 28, 17, 20, 11, 21,  9,  7, 19,  6, 24,  2, 25, 18, 10, 12, 15, 13,  5, ],
		[ 14,  7, 25,  0, 18, 11,  6,  4, 26, 29, 22, 21, 10,  8, 17, 27,  2, 23, 16,  9, 15, 24, 28, 19,  3,  5, 20, 13,  1, 12, ],
		[ 22, 17,  5,  0,  6, 26,  7,  9, 25,  2, 20, 11, 13, 23, 24,  3, 10, 16,  4, 19,  1, 28, 14,  8, 15, 27, 12, 29, 21, 18, ],
		[ 25, 29,  1, 15,  2,  7,  9, 14, 27, 16, 28,  8, 11, 24, 19, 21, 23, 26,  6,  4, 18, 13,  5, 12, 17,  0, 10,  3, 22, 20, ],
		[ 16,  9,  5,  0, 23, 22, 21, 19,  8,  7,  6, 29, 20, 25,  2,  1, 12,  3, 11,  4, 10, 26, 18, 17, 24, 13, 14, 15, 28, 27, ],
		[ 12, 19, 17,  8, 21,  2, 18,  1, 13,  5, 28, 25, 27, 26, 24, 10, 23,  4, 15,  0, 16,  9,  7, 29, 22,  6, 14,  3, 11, 20, ],
		[ 23, 26, 19,  0, 28, 21,  1,  5, 24, 29, 17, 12, 14,  4, 15, 22,  3, 20, 10, 18,  6,  2, 25, 27,  8,  7,  9, 16, 11, 13, ],
		[ 11,  8, 13, 24,  7, 28, 27, 21, 22, 23,  0,  4, 17, 12,  6, 20, 29, 19,  1, 16, 18, 25, 26, 14, 15,  2,  5,  9,  3, 10, ],
		[ 22, 14,  5, 17, 24,  3,  0,  7,  4, 29,  9, 13, 23, 18, 10, 25,  6,  1, 20, 27, 16,  8, 28, 15,  2, 11, 21, 19, 12, 26, ],
		[  3, 27, 28,  6, 26,  1, 22,  2, 12, 25,  9, 24, 13,  8, 20, 10,  5, 21, 17,  4, 11, 23,  7, 19,  0, 15, 16, 29, 14, 18, ],
		[  5, 17, 21,  6, 11,  1, 16, 14, 12, 19,  4, 10, 26,  2, 20,  7,  8,  9, 25,  3, 18, 27, 23, 15, 22, 13, 29,  0, 24, 28, ],
		[ 16,  2, 19, 13, 26,  5, 27,  0, 24, 15,  8, 11,  1, 29,  6,  9, 17, 10,  7, 14, 25,  4, 23, 28, 12, 22, 21,  3, 18, 20, ],
		[ 23, 22, 19,  0, 21, 12,  2, 13, 27,  6,  9,  4,  5, 16,  7,  1, 29, 14, 15, 25, 18,  8, 11, 10, 28, 26, 20, 17, 24,  3, ],
		[ 18, 17,  5,  2, 20, 25, 29, 21, 13, 22,  3,  6, 28, 23,  4,  8, 19, 14, 26,  1, 24, 27,  7, 12, 11,  0, 16,  9, 10, 15, ],
		[ 29, 28,  4, 19, 23,  7, 17, 12,  9, 15, 26, 20, 10, 16,  6, 13, 18,  0, 11,  3,  2, 21,  1,  8, 24, 14, 27, 25,  5, 22, ],
		[ 25, 22,  0,  3, 24, 18,  4,  8,  6, 15, 17, 20,  2, 10, 23, 27, 14, 16, 19, 12,  7, 29,  1, 26, 21, 13,  5, 11, 28,  9, ],
		[ 13,  5, 23, 10,  0, 27, 18,  2, 12, 26,  7, 29, 22, 17, 11, 28, 15, 24,  3, 19, 14,  8, 25,  9, 20, 16,  6,  1, 21,  4, ],
		[ 10,  3, 25,  0, 26, 20,  6,  2,  9,  5, 28, 21, 22, 16,  8, 18, 17, 24, 13,  1, 19, 29, 12, 11, 23,  7, 15, 14,  4, 27, ],
		[  1,  8, 10, 22, 20, 19, 11, 23, 12,  7,  6, 26, 14,  5, 17, 18, 15,  9, 25, 24,  0, 28, 27, 29,  3, 13,  4, 21, 16,  2, ],
		[ 24, 22, 18, 12,  5, 19,  6,  1, 14,  2, 13, 26,  8, 16,  7, 23, 25, 10, 11, 27,  3,  9, 20, 17, 21, 29,  0,  4, 15, 28, ],
		[  9,  4, 27, 15,  6, 14,  1, 11, 12, 10, 23, 24, 16, 18,  2, 13, 22,  7, 19, 20, 29,  5, 28, 25,  8, 26,  3, 21,  0, 17, ],
		[ 20, 23,  8,  0, 15, 14, 24, 22, 10,  7, 26, 27,  3,  9, 17, 18, 21, 16,  1,  2,  6, 12, 13, 19, 29,  4, 25, 28, 11,  5, ],
		[ 25,  8,  6, 21, 29, 15,  4,  1, 16,  7,  2,  5, 13, 14,  0, 11, 23, 27, 28, 22, 20, 26,  3, 24, 12, 10, 18, 17, 19,  9, ],
		[ 12,  7, 15, 16,  2, 20, 13,  4, 14, 11, 27, 18,  8,  9,  5, 26,  6, 28,  3,  0, 23, 22, 24, 29, 25, 19,  1, 17, 10, 21, ],
		[ 10, 24, 15, 22,  7, 20, 12,  6,  9, 27, 26, 16, 23,  0,  3, 25,  1,  5,  2, 19, 14, 29, 18, 11, 17, 28, 13, 21,  8,  4, ],
		[ 17, 24,  6, 21,  9,  7, 11, 25, 20, 23,  5,  1,  2, 13, 27, 19, 22, 28,  3,  4,  0, 10, 15, 12, 29, 14,  8, 26, 16, 18, ],
		[ 25,  0, 26, 22, 28,  8, 27, 19, 18, 10, 13, 11, 20,  9,  1, 23, 17,  7,  2, 16,  5,  3,  4, 29, 14, 21, 15, 12, 24,  6, ],
		[ 21,  5, 16,  6, 11, 19, 18, 12,  3,  7, 20, 25, 13,  9, 26, 14, 24,  4, 22,  1, 15,  8,  0, 23,  2, 27, 28, 29, 10, 17, ],
		[ 20, 16,  7, 11,  3, 19, 10, 27,  0, 26, 17,  8,  2,  4, 21, 14, 24, 15, 28, 29,  1, 18, 23,  9,  6, 12, 13, 25, 22,  5, ],
		[ 16,  2, 25,  4,  1, 24, 27,  0, 10,  9, 23, 20,  6,  5, 15, 22, 21, 13,  7,  8, 29,  3, 14, 18, 11, 12, 19, 26, 28, 17, ],
		[ 14, 23,  3,  4,  2, 21,  7, 15,  8, 18, 10, 27, 16, 22, 13, 17,  6, 19, 20, 12, 29,  0, 24, 11,  9,  1, 26, 25,  5, 28, ],
		[ 13, 12, 17, 28,  5, 29, 21, 24, 15, 20,  1, 16,  6, 10,  4,  7,  3, 14, 27, 22, 23, 25, 11,  9,  0, 19, 18,  2,  8, 26, ],
		[ 15, 21, 29,  2, 11,  3, 25,  8,  9,  4,  1,  0, 18, 24, 10, 28,  7,  5, 17, 12, 20, 26, 22, 19, 16, 27, 23,  6, 14, 13, ],
		[ 26,  1,  9,  4,  8, 19, 18, 12,  2, 16, 10, 27, 20, 11,  0, 24, 29, 25,  3,  6,  7, 14, 15, 28,  5, 22, 13, 21, 23, 17, ],
		[  9,  6, 10, 24, 27, 29, 23, 18,  0, 28,  3, 25, 11,  5,  4, 14,  7, 17, 19, 15,  2, 13, 16, 20,  8, 22, 12, 21, 26,  1, ],
		[  4,  8, 16, 12,  7, 23, 18, 13,  0,  2, 22,  6,  5, 10, 28, 14, 15, 29, 24, 25, 20, 17, 21, 27, 19,  9,  1,  3, 11, 26, ],
		[ 20,  4, 22, 18,  9, 13, 29, 14,  5,  0, 28, 19, 16,  3, 17, 11, 23,  2, 25,  1,  8, 15, 21,  7, 26, 12, 27,  6, 10, 24, ],
		[ 22, 13,  8, 15, 16, 17, 28, 10,  5,  7, 18, 20,  3, 11,  9, 24, 19, 26, 14,  6,  4,  0,  2, 29, 23, 12, 27, 21, 25,  1, ],
		[ 20, 14,  9, 29, 10, 26, 15, 13, 11,  4, 25, 22, 19,  5, 18, 17, 28,  7,  6, 16, 27,  3,  8,  1,  2, 23, 12, 24, 21,  0, ],
		[ 18, 25, 15, 19, 29,  7,  0, 20, 13, 28, 27,  3, 21,  2, 17,  4,  6,  8, 24, 26, 10, 22, 23, 11, 14, 12, 16,  9,  1,  5, ],
		[ 20,  2,  4, 18, 26, 17, 13,  9, 12,  6, 24, 19,  5,  7,  0, 15, 10,  8, 27, 21, 22, 11,  3, 28, 16, 23, 29,  1, 14, 25, ],
		[ 19,  1, 28, 29,  7, 25,  0, 26, 27,  5,  2,  3, 21, 22, 15, 24,  4, 12,  9, 23, 18,  8, 17, 11,  6, 14, 20, 13, 16, 10, ],
		[  1,  6, 26, 12, 23,  9,  3, 11,  0, 17, 10,  4, 24, 18, 22,  2, 13,  8, 19, 29, 21, 28, 14, 16, 15,  7, 27, 20,  5, 25, ],
		[ 13, 11, 18, 19,  8, 27, 23, 15, 10,  5,  1,  6, 21, 28, 12, 20,  7, 24, 29,  9, 26,  3,  4, 16, 17, 14,  2, 25,  0, 22, ],
		[  2, 13,  4, 14, 11, 23, 29, 25,  7, 19, 22, 12, 26,  6,  8,  5, 24,  0, 16, 27,  1, 10, 15, 28, 18, 17, 21,  3, 20,  9, ],
		[ 23,  9,  4,  8, 28, 22, 21, 13, 16,  2,  6, 27, 11, 18, 25, 24, 14, 20,  7, 17,  3, 12,  1,  0, 29,  5, 19, 15, 10, 26, ],
		[  1, 17, 13, 22, 15, 19,  3,  0,  9, 21, 11, 14,  2,  7, 18, 25, 16, 23, 28,  5, 27,  6, 12, 20, 10, 24,  8, 29, 26,  4, ],
		[ 29, 17, 23, 20, 18,  5, 21,  8, 26, 10, 13, 22,  9, 11, 16,  6,  0, 27,  2, 15, 24, 12,  7,  3, 19,  4, 25,  1, 14, 28, ],
		[ 11,  4, 18,  8,  3,  5, 24, 20,  0, 16, 22, 17, 15,  7,  6, 28, 21, 29, 26, 14, 25,  1, 10, 27,  9, 12,  2, 19, 13, 23, ],
		[  7, 16,  8, 27, 26, 10, 25, 28,  6,  2, 13, 17,  0,  4, 18, 15, 22, 29, 11, 24, 12, 20,  9, 21, 23,  1,  5,  3, 19, 14, ],
		[ 16, 19, 25, 17, 27, 24,  1, 14,  5, 23,  9, 15,  7,  6,  0,  2, 10, 26, 21, 18, 29,  3, 20,  4, 13,  8, 12, 28, 11, 22, ],
		[ 16,  0, 14, 24, 26,  2,  4,  8, 11, 18, 20, 10, 17, 28,  1,  7, 19, 25, 13,  3,  6, 23, 12, 22, 29, 15,  9, 27, 21,  5, ],
		[ 19, 17, 13, 26,  9, 29,  1,  6,  5, 23, 12,  4, 15, 22, 28,  2,  0,  8, 24, 20, 14,  7, 25, 27, 10,  3, 16, 18, 21, 11, ],
		[  3, 24,  4, 20, 29, 19,  7,  8, 22, 16, 12, 26, 10, 15,  6,  1, 27, 11, 25, 23, 18, 17, 13,  2, 21, 28,  0, 14,  5,  9, ],
		[ 20, 15, 16,  4, 10, 13, 28,  6, 14, 24, 21,  1, 27,  2, 19, 23, 12,  9, 22,  7, 18,  3, 11,  0, 26,  5, 25,  8, 29, 17, ],
		[ 21,  3, 18,  4,  6, 16,  1, 25, 13, 23, 17, 24, 20, 28,  7, 19, 15,  2, 12, 14,  8, 26,  9, 22, 11,  0, 10,  5, 29, 27, ],
		[ 28, 22, 19,  0,  6,  1, 21, 20, 29, 13, 14, 17,  8, 23,  7,  9, 10, 25,  3, 12,  2, 27,  4, 16, 26, 15, 18,  5, 24, 11, ],
		[ 18,  7, 12, 22,  1, 17, 25, 26,  8, 16, 29, 27,  3, 11, 28,  9,  4, 23, 19, 21,  0, 13,  2,  6, 20, 10, 24, 14, 15,  5, ],
		[ 19, 25, 15,  9, 21, 26, 11,  1,  2,  3, 20, 22, 16, 28,  5, 27, 13, 14, 18,  6,  4, 23, 17,  7,  8, 12,  0, 29, 24, 10, ],
		[  9, 25, 10,  6, 12, 18, 16,  1, 14, 22, 13, 26,  7, 29,  2, 17,  5, 15, 20, 19, 23,  0, 11, 21, 27,  8, 28, 24,  4,  3, ],
		[ 20, 19, 23, 27, 11,  7, 21, 17, 26, 29,  4, 16,  5,  9, 22,  2, 10,  3, 24, 14, 12, 25, 28,  6,  1, 13,  0, 18, 15,  8, ],
		[ 28,  4,  3, 14,  6, 11, 17,  9, 12,  8, 26, 22,  5, 20, 19, 29, 23, 10, 21,  0, 24, 16,  2, 25,  1, 18, 15, 13, 27,  7, ],
		[  1,  0,  8,  9, 19, 22,  6, 24,  4,  5, 27, 29, 17,  2, 18, 25, 26, 23, 16, 15,  3, 11,  7, 12, 14, 20, 28, 21, 10, 13, ],
		[  6,  2,  9, 20, 29, 21, 13,  8, 18, 23, 17, 27,  0, 10, 22, 24,  5,  4, 15,  1, 14, 28, 16, 26, 12, 25, 19,  3,  7, 11, ],
		[ 22, 27,  1,  5,  4, 19, 20,  2, 12, 11, 13, 23,  3,  9, 24, 14, 16,  6, 10,  0, 17, 25, 26, 15, 21, 18,  7, 28, 29,  8, ],
		[ 27, 25,  4, 29, 15, 23,  0, 24, 16, 28, 20, 21,  2, 11, 26, 22, 12, 10,  7,  6,  3,  1,  8,  5, 17, 14, 13,  9, 19, 18, ],
		[ 27, 16,  6, 12, 17, 14, 11, 19,  7, 18, 20,  1, 28,  4, 22,  9, 24, 15, 29, 10,  3,  5,  8, 25, 26, 13, 21,  0, 23,  2, ],
		[  3, 19, 21, 26, 27,  2,  9,  7, 16, 22, 29, 11, 18,  4, 17,  8,  1, 12,  5,  6, 25, 20, 14, 23, 28, 13, 24,  0, 15, 10, ],
		[  4, 28,  7, 29, 15,  0,  8, 25,  9, 11, 20, 22, 18, 21, 19,  1, 16, 26, 13, 24, 23, 12,  3,  2,  6, 14, 27, 17,  5, 10, ],
		[  5, 20, 26,  9,  6, 29, 11,  0, 23, 18,  4, 24,  7, 22, 27,  2, 25, 10,  1, 14,  8, 13, 28, 19, 16, 21, 15, 17,  3, 12, ],
		[  9,  3, 14, 16,  7, 23,  2, 22, 11,  0,  8, 27, 21, 13,  5, 12,  6, 28, 25, 17, 15, 18, 26, 29, 19, 20,  1, 24,  4, 10, ],
		[ 15,  9, 17, 16,  2, 20,  5, 27,  3, 25, 11,  4, 12, 28, 22, 18,  8, 10, 26, 13,  7,  6, 19,  1, 23,  0, 24, 14, 29, 21, ],
		[  5,  0, 10, 17,  2,  8, 23,  4, 24, 15, 19, 13,  7, 14,  6,  9, 21, 20, 22, 26, 29, 25, 16, 18, 28, 27,  1,  3, 11, 12, ],
		[  0,  2, 20, 22, 24, 25,  6, 15, 16,  9, 14,  4, 23, 13, 21, 17, 11,  3, 19, 12, 18, 28,  5, 10, 26,  1,  8,  7, 29, 27, ],
		[ 14,  7,  6,  0,  8, 29, 18, 17, 28,  5, 27, 21, 10, 15, 11, 25,  1, 12, 26, 24, 22, 13,  4, 19,  2, 16,  9,  3, 20, 23, ],
		[  8, 14,  6, 23, 15,  4, 27, 20, 21, 12,  3, 25,  2, 22, 13,  1,  7, 24, 29, 19,  9,  0,  5, 10, 28, 17, 11, 16, 18, 26, ],
		[ 14, 21,  3, 27, 25, 12, 10,  2,  6, 22, 28, 19,  9, 15,  4, 11, 29, 26,  5, 13,  8,  7, 20, 24, 16, 18,  1, 17,  0, 23, ],
		[ 15, 28,  7, 18, 12, 10,  3, 26,  0, 25, 29, 16, 23, 13, 24,  6, 21,  4, 14,  5, 17, 22, 20,  1,  9, 27,  2,  8, 19, 11, ],
		[ 22, 10, 19, 21, 23,  5,  3, 15, 26, 28, 25, 11, 27, 14, 20,  7, 24,  2,  0, 13, 29,  1, 18,  6, 17, 16, 12,  9,  8,  4, ],
		[ 25, 22, 15, 23,  5,  3, 12, 27,  1, 29, 10, 14,  0, 11, 17, 13, 28, 24,  4, 21, 18,  8,  9,  7,  6,  2, 19, 16, 26, 20, ],
		[  5, 27,  1,  9,  4, 25, 26,  8, 14, 24,  7, 18, 29, 15,  3, 28, 21, 19, 17,  0, 16, 10, 13, 11, 12,  6, 22, 23, 20,  2, ],
		[ 15, 24,  1, 27, 18, 13, 16, 22, 10, 23,  5, 21, 19,  2,  9, 29, 26, 14, 12,  0,  7, 17,  4, 28,  3, 11, 20,  8, 25,  6, ],
		[  0,  7,  6, 21,  4, 17, 27,  5,  9, 23, 16,  1,  3, 29, 13,  8, 20, 22, 15, 28, 25, 26,  2, 12, 14, 24, 19, 18, 11, 10, ],
		[  3, 11,  1, 15,  5, 27, 16, 21,  6, 18,  4, 25, 29, 14, 20,  2,  7, 26, 17, 23,  9, 19, 12, 28, 24, 13,  8,  0, 10, 22, ],
		[  6, 14,  3,  1, 22,  8, 27,  4, 17, 13, 26, 18,  7, 12, 19, 16, 15,  5, 21,  9, 25, 10,  2, 28, 20, 23, 29, 11,  0, 24, ],
		[ 28, 12,  5,  4, 19, 23, 15, 10, 20, 18,  2, 27, 21,  9, 17, 16, 24, 11, 13, 22, 26, 29,  1,  6,  0,  7, 25, 14,  3,  8, ],
		[ 18, 12, 20,  6, 11, 21, 16, 13,  2, 23,  9, 26, 27, 29, 15,  4, 14,  0,  7, 25, 22, 24,  8,  1,  3, 10, 17,  5, 19, 28, ],
		[  5, 17, 19,  7,  6, 24, 12, 22, 16, 10, 18, 14, 21, 25,  8,  4, 26,  1,  9,  0, 23, 27, 15, 28, 13, 11,  3, 29,  2, 20, ],
		[ 11, 26,  0, 18,  2, 13,  1, 28, 20, 22, 25, 14, 17, 21,  4,  7,  5, 29,  9, 23, 19, 24, 16, 15,  3, 10,  6, 12, 27,  8, ],
	];

	var str_dst = '';
	var str_src = value;
	var lpos;

	var cpx_idx = Math.round((Math.random() * 1000)) % 100; // (str_src[31].charCodeAt(0) - 0x30) & 0x0F;
	var cpx_item = cpx_logic[cpx_idx];

	for( lpos=0; lpos< cpx_item.length; lpos++ ) {
        var arr_idx = cpx_item[lpos];

        str_dst += str_src[arr_idx];
	}
	str_dst = str_dst.substr(0, 30);
	str_dst += _decToHex(cpx_idx, 2);

	return str_dst;
}

module.exports.generate64 = function()
{
	// Micro 처리 단위 까지 보장 해당 함수가 Nano단위로 처리 되면 중복 가능성 있음
	var now_date = new Date();

	var value = '';
	var val_date = 0;

    //////////////////////////////////////////////
	// 8 : IP or Host (8)
	var var_name = '';
	var val_ip = _getInterfaceIP(true);
	if( val_ip != null ) {
		var npos;
		var ip_nums = val_ip.split('.');
		for( npos=0; npos< ip_nums.length; npos++ ) {
	        // console.log('ip:' + ip_nums[npos]);
	        var_name += _decToHex(ip_nums[npos], 2);
		}
	}
	if( var_name == null || var_name.length <= 0 ) {
		var val_host = m_os.hostname();
		val_host = var_name.toUpperCase();

		var spos = val_host.length - 4;

		var_name = '';

		calc = (val_host.charCodeAt(spos+0) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);

		calc = (val_host.charCodeAt(spos+1) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);

		calc = (val_host.charCodeAt(spos+2) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);

		calc = (val_host.charCodeAt(spos+3) - 65) & 0xFF;
		var_name += _decToHex(calc, 2);
	}
	value += var_name;

    //////////////////////////////////////////////
	// 6 : PID (6)
	var var_pid = _decToHex(process.pid, 6);
	if( var_pid.length > 6 )
		var_pid = var_pid.substr(0, 6);
	value += var_pid;

    //////////////////////////////////////////////
	// 8 : Date(6) + Time(4)
	val_date = 0;     val_date += (now_date.getFullYear() % 100);	// 2 (2017 -> 17)
	val_date *= 100;  val_date += (now_date.getMonth() + 1) % 100;	// 2 , 4
	val_date *= 100;  val_date += (now_date.getDate() % 100);		// 2 , 6
	val_date *= 100;  val_date += (now_date.getHours() % 100);		// 2 , 8
	val_date *= 100;  val_date += (now_date.getMinutes() % 100);	// 2 , 10
	value += _decToHex(val_date, -8);

    //////////////////////////////////////////////
	// 10 : Second(13)
    g_unique_idx++;
    if( g_unique_idx >= 1000000 )
		g_unique_idx = 1;

    val_date = 0;        val_date += Math.round(Math.random() * 1000) % 100;  // 2
	val_date *= 1000000; val_date += (g_unique_idx % 1000000);				 // 6
    val_date *= 1000;    val_date += (now_date.getMilliseconds() % 1000);    // 3
    val_date *= 100;     val_date += (now_date.getSeconds() % 100);          // 2
	value += _decToHex(val_date, -10);
	// console.log(g_unique_idx + ', date:' + value + ',' + val_date);

// 32

    const hash = m_crypto.createHash('sha256');
    hash.update(value);
    str_dst = hash.digest('hex');
	return str_dst;
}

var serial_cpx_logic = [
	[  6,  4,  0,  7,  5,  1,  2,  3, ],
	[  6,  7,  2,  5,  4,  3,  1,  0, ],
	[  6,  4,  1,  7,  2,  5,  3,  0, ],
	[  5,  3,  0,  2,  6,  1,  7,  4, ],
	[  2,  3,  7,  4,  6,  0,  1,  5, ],
	[  3,  2,  0,  1,  6,  4,  7,  5, ],
	[  0,  2,  7,  4,  3,  1,  6,  5, ],
	[  2,  0,  4,  6,  7,  3,  5,  1, ],
	[  7,  1,  3,  5,  6,  0,  2,  4, ],
	[  5,  0,  6,  2,  4,  7,  3,  1, ],
	[  4,  2,  1,  6,  7,  5,  3,  0, ],
	[  4,  7,  1,  0,  3,  5,  2,  6, ],
	[  7,  1,  3,  2,  0,  4,  6,  5, ],
	[  4,  7,  1,  2,  5,  0,  3,  6, ],
	[  7,  3,  2,  5,  6,  4,  1,  0, ],
	[  6,  5,  4,  7,  3,  2,  0,  1, ],
	[  7,  6,  0,  4,  2,  3,  1,  5, ],
	[  1,  7,  2,  4,  3,  0,  6,  5, ],
	[  5,  2,  6,  7,  3,  0,  4,  1, ],
	[  5,  3,  2,  4,  7,  6,  0,  1, ],
	[  2,  6,  0,  7,  5,  1,  4,  3, ],
	[  6,  4,  5,  1,  0,  7,  2,  3, ],
	[  1,  5,  0,  6,  2,  3,  7,  4, ],
	[  6,  2,  5,  1,  7,  0,  3,  4, ],
	[  3,  0,  4,  1,  2,  6,  5,  7, ],
	[  7,  1,  5,  3,  2,  6,  0,  4, ],
	[  5,  6,  7,  1,  3,  2,  4,  0, ],
	[  6,  5,  3,  2,  1,  4,  0,  7, ],
	[  0,  5,  7,  6,  4,  1,  2,  3, ],
	[  4,  5,  2,  1,  0,  6,  7,  3, ],
	[  3,  5,  4,  7,  1,  6,  2,  0, ],
	[  2,  7,  4,  0,  1,  5,  3,  6, ],
	[  2,  5,  3,  0,  4,  6,  7,  1, ],
	[  2,  5,  1,  3,  0,  7,  6,  4, ],
	[  0,  4,  3,  1,  6,  7,  5,  2, ],
	[  5,  2,  7,  1,  4,  3,  0,  6, ],
	[  3,  7,  2,  0,  1,  6,  5,  4, ],
	[  6,  3,  1,  4,  5,  7,  0,  2, ],
	[  1,  4,  3,  5,  7,  6,  2,  0, ],
	[  2,  6,  4,  0,  3,  5,  1,  7, ],
	[  7,  1,  0,  4,  6,  2,  5,  3, ],
	[  0,  1,  3,  2,  7,  6,  4,  5, ],
	[  3,  6,  0,  4,  7,  1,  5,  2, ],
	[  4,  3,  5,  1,  2,  0,  6,  7, ],
	[  1,  3,  0,  5,  2,  4,  7,  6, ],
	[  4,  6,  1,  5,  7,  3,  0,  2, ],
	[  2,  0,  7,  1,  6,  3,  4,  5, ],
	[  1,  6,  5,  2,  0,  7,  3,  4, ],
	[  7,  4,  1,  6,  2,  0,  3,  5, ],
	[  5,  2,  7,  1,  6,  4,  0,  3, ],
	[  4,  6,  0,  3,  7,  5,  2,  1, ],
	[  5,  0,  7,  4,  1,  3,  6,  2, ],
	[  5,  7,  2,  4,  0,  3,  6,  1, ],
	[  5,  7,  6,  3,  4,  1,  2,  0, ],
	[  2,  3,  6,  7,  1,  5,  0,  4, ],
	[  0,  4,  1,  7,  2,  6,  3,  5, ],
	[  4,  3,  1,  5,  6,  0,  2,  7, ],
	[  1,  3,  2,  6,  5,  4,  0,  7, ],
	[  2,  4,  3,  6,  5,  0,  7,  1, ],
	[  0,  3,  4,  1,  5,  7,  6,  2, ],
	[  4,  2,  6,  0,  1,  3,  5,  7, ],
	[  3,  6,  2,  4,  7,  0,  5,  1, ],
	[  0,  5,  3,  4,  2,  6,  7,  1, ],
	[  3,  4,  5,  7,  1,  2,  0,  6, ],
];

module.exports.generateSerialKey64 = function(key_idx, cnt_idx)
{
	var fix_date = new Date(1990, 1, 1, 0, 0, 0, 0);
	var now_date = new Date();
	var serial_no = cnt_idx;

	gap_sec = fix_date.getTime();
	gap_sec = Math.round(gap_sec/60/60/24);
	serial_no ^= gap_sec;

	var serial_key = _decToHex(serial_no, 8);
	var str_dst = '';

	var cpx_idx = Math.round((Math.random() * 1000)) % serial_cpx_logic.length; // (str_src[31].charCodeAt(0) - 0x30) & 0x0F;

	var cpx_item = serial_cpx_logic[cpx_idx];
	for( lpos=0; lpos< cpx_item.length; lpos++ ) {
        var arr_idx = cpx_item[lpos];

        str_dst += serial_key[arr_idx];
	}

	str_dst = str_dst.substr(0, 8);
	str_dst += _decToHex(cpx_idx, 2);
	return str_dst;
}

module.exports.verifySerialKey64 = function(serial_key, callback)
{
	var items = null;
	var fix_date = new Date(1990, 1, 1, 0, 0, 0, 0);

	var cpx_idx = parseInt(serial_key.substr(8, 2), 16);
	var cpx_item = serial_cpx_logic[cpx_idx];

	var str_vrf = '';
	var str_tmp = [];
	for( lpos=0; lpos< cpx_item.length; lpos++ ) {
        str_tmp[ cpx_item[lpos] ] = serial_key[lpos];
	}
	for( lpos=0; lpos< cpx_item.length; lpos++ ) {
        str_vrf += str_tmp[lpos];
	}

	var serial_no = parseInt(str_vrf, 16);

	gap_sec = fix_date.getTime();
	gap_sec = Math.round(gap_sec/60/60/24);
	serial_no ^= gap_sec;

	callback(null, 0, serial_no);
}
